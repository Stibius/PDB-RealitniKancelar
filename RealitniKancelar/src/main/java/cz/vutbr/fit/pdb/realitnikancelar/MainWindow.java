/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.vutbr.fit.pdb.realitnikancelar;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Path2D;
import java.awt.Color;
import java.lang.Math;
import javax.swing.JColorChooser;
import java.awt.BasicStroke;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.geom.AffineTransform;
import javax.swing.JOptionPane;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.awt.geom.PathIterator;
import java.util.ArrayList;

/**
 *
 * @author Honza
 * Hlavni okno.
 */
public class MainWindow extends javax.swing.JFrame {

    private static final Color DEFAULT_BACK_COLOR = Color.WHITE;
    private static final Color DEFAULT_POINT_COLOR = Color.BLACK;
    private static final Color DEFAULT_LINE_COLOR = Color.BLACK;
    private static final Color DEFAULT_FILL_COLOR = Color.YELLOW;
    private static final Color DEFAULT_SELECTION_LINE_COLOR = Color.RED;
    private static final Color DEFAULT_SELECTION_FILL_COLOR = new Color(255, 0, 0, 50);
    
    private int lastX, lastY;
    
    private Point origin = new Point();
    
    private boolean newPolyline = false;
    private boolean newPolygon = false;
    private boolean newRectangle = false;
    private boolean newEllipse = false;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        saveChangesButton.setEnabled(false);
        deleteButton.setEnabled(false);
        saveChangesMenuItem.setEnabled(false);
        deleteMenuItem.setEnabled(false);
        selectRadioButton.setEnabled(false);
        addPointRadioButton.setEnabled(false);
        addPolylineRadioButton.setEnabled(false);
        addPolygonRadioButton.setEnabled(false);
        addRectangleRadioButton.setEnabled(false);
        addEllipseRadioButton.setEnabled(false);
        
        buttonGroup.add(selectRadioButton);
        buttonGroup.add(addPointRadioButton);
        buttonGroup.add(addPolylineRadioButton);
        buttonGroup.add(addRectangleRadioButton);
        buttonGroup.add(addEllipseRadioButton);
        buttonGroup.add(addPolygonRadioButton);
        
        ((DrawingPanel)mapPanel).backColor = DEFAULT_BACK_COLOR;
        ((DrawingPanel)mapPanel).pointColor = DEFAULT_POINT_COLOR;
        ((DrawingPanel)mapPanel).lineColor = DEFAULT_LINE_COLOR;
        ((DrawingPanel)mapPanel).fillColor = DEFAULT_FILL_COLOR;
        ((DrawingPanel)mapPanel).selectionLineColor = DEFAULT_SELECTION_LINE_COLOR;
        ((DrawingPanel)mapPanel).selectionFillColor = DEFAULT_SELECTION_FILL_COLOR;
        ((DrawingPanel)mapPanel).pointThickness = (int)pointThicknessSpinner.getValue();
        ((DrawingPanel)mapPanel).lineThickness = (int)lineThicknessSpinner.getValue();
        
        pointColorPanel.setBackground(DEFAULT_POINT_COLOR);
        backColorPanel.setBackground(DEFAULT_BACK_COLOR);
        lineColorPanel.setBackground(DEFAULT_LINE_COLOR);
        fillColorPanel.setBackground(DEFAULT_FILL_COLOR);
        selectionColorPanel.setBackground(DEFAULT_SELECTION_LINE_COLOR);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        infoPanel = new javax.swing.JPanel();
        infoNazevLabel = new javax.swing.JLabel();
        infoTypLabel = new javax.swing.JLabel();
        infoMajitelLabel = new javax.swing.JLabel();
        infoPopisLabel = new javax.swing.JLabel();
        infoNazevLabel1 = new javax.swing.JLabel();
        infoNazevLabel2 = new javax.swing.JLabel();
        infoNazevLabel3 = new javax.swing.JLabel();
        infoNazevLabel4 = new javax.swing.JLabel();
        editPanel = new javax.swing.JPanel();
        selectRadioButton = new javax.swing.JRadioButton();
        addPointRadioButton = new javax.swing.JRadioButton();
        addPolylineRadioButton = new javax.swing.JRadioButton();
        addRectangleRadioButton = new javax.swing.JRadioButton();
        addEllipseRadioButton = new javax.swing.JRadioButton();
        addPolygonRadioButton = new javax.swing.JRadioButton();
        mapSettingsPanel = new javax.swing.JPanel();
        backColorPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lineColorPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fillColorPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lineThicknessSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        pointColorPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        pointThicknessSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        selectionColorPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        mapScrollPanel = new javax.swing.JScrollPane();
        mapPanel = new DrawingPanel();
        loadDataButton = new javax.swing.JButton();
        saveChangesButton = new javax.swing.JButton();
        positionLabel = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        loadDataMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        saveChangesMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Realitní kancelář");

        tabbedPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabbedPane.setMinimumSize(new java.awt.Dimension(100, 130));

        infoNazevLabel.setText("Název objektu");

        infoTypLabel.setText("Typ objektu");

        infoMajitelLabel.setText("Majitel");

        infoPopisLabel.setText("Popis");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(infoNazevLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoTypLabel)
                    .addComponent(infoMajitelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoPopisLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(infoNazevLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                        .addGap(169, 169, 169))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addComponent(infoNazevLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                        .addComponent(infoNazevLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                        .addComponent(infoNazevLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoNazevLabel)
                    .addComponent(infoNazevLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoTypLabel)
                    .addComponent(infoNazevLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoMajitelLabel)
                    .addComponent(infoNazevLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoPopisLabel)
                    .addComponent(infoNazevLabel4))
                .addContainerGap(283, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Informace", infoPanel);

        selectRadioButton.setSelected(true);
        selectRadioButton.setText("Posouvání a mazání");

        addPointRadioButton.setText("Přidat bod");

        addPolylineRadioButton.setText("Přidat lomenou čáru");
        addPolylineRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addPolylineRadioButtonItemStateChanged(evt);
            }
        });

        addRectangleRadioButton.setText("Přidat obdélník");
        addRectangleRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addRectangleRadioButtonItemStateChanged(evt);
            }
        });

        addEllipseRadioButton.setText("Přidat elipsu");
        addEllipseRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addEllipseRadioButtonItemStateChanged(evt);
            }
        });

        addPolygonRadioButton.setText("Přidat polygon");
        addPolygonRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addPolygonRadioButtonItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(selectRadioButton)
                .addGap(18, 18, 18)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPolygonRadioButton)
                    .addComponent(addPolylineRadioButton)
                    .addComponent(addPointRadioButton)
                    .addComponent(addRectangleRadioButton)
                    .addComponent(addEllipseRadioButton))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectRadioButton)
                    .addComponent(addPointRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPolylineRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addRectangleRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addEllipseRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPolygonRadioButton)
                .addContainerGap(194, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Editace", editPanel);

        backColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        backColorPanel.setMaximumSize(new java.awt.Dimension(15, 15));
        backColorPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        backColorPanel.setPreferredSize(new java.awt.Dimension(15, 15));
        backColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout backColorPanelLayout = new javax.swing.GroupLayout(backColorPanel);
        backColorPanel.setLayout(backColorPanelLayout);
        backColorPanelLayout.setHorizontalGroup(
            backColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );
        backColorPanelLayout.setVerticalGroup(
            backColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );

        jLabel1.setText("Barva pozadí:");

        lineColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lineColorPanel.setMaximumSize(new java.awt.Dimension(15, 15));
        lineColorPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        lineColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lineColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lineColorPanelLayout = new javax.swing.GroupLayout(lineColorPanel);
        lineColorPanel.setLayout(lineColorPanelLayout);
        lineColorPanelLayout.setHorizontalGroup(
            lineColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );
        lineColorPanelLayout.setVerticalGroup(
            lineColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );

        jLabel2.setText("Barva čar:");

        fillColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fillColorPanel.setMaximumSize(new java.awt.Dimension(15, 15));
        fillColorPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        fillColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fillColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fillColorPanelLayout = new javax.swing.GroupLayout(fillColorPanel);
        fillColorPanel.setLayout(fillColorPanelLayout);
        fillColorPanelLayout.setHorizontalGroup(
            fillColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );
        fillColorPanelLayout.setVerticalGroup(
            fillColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );

        jLabel3.setText("Barva vyplněných oblastí:");

        lineThicknessSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 5, 1));
        lineThicknessSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                lineThicknessSpinnerStateChanged(evt);
            }
        });

        jLabel4.setText("Tloušťka čar:");

        pointColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pointColorPanel.setMaximumSize(new java.awt.Dimension(15, 15));
        pointColorPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        pointColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pointColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pointColorPanelLayout = new javax.swing.GroupLayout(pointColorPanel);
        pointColorPanel.setLayout(pointColorPanelLayout);
        pointColorPanelLayout.setHorizontalGroup(
            pointColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );
        pointColorPanelLayout.setVerticalGroup(
            pointColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );

        jLabel5.setText("Barva bodů:");

        pointThicknessSpinner.setModel(new javax.swing.SpinnerNumberModel(4, 1, 10, 1));
        pointThicknessSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pointThicknessSpinnerStateChanged(evt);
            }
        });

        jLabel6.setText("Tloušťka bodů:");

        selectionColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        selectionColorPanel.setMaximumSize(new java.awt.Dimension(15, 15));
        selectionColorPanel.setMinimumSize(new java.awt.Dimension(15, 15));
        selectionColorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectionColorPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout selectionColorPanelLayout = new javax.swing.GroupLayout(selectionColorPanel);
        selectionColorPanel.setLayout(selectionColorPanelLayout);
        selectionColorPanelLayout.setHorizontalGroup(
            selectionColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );
        selectionColorPanelLayout.setVerticalGroup(
            selectionColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 13, Short.MAX_VALUE)
        );

        jLabel7.setText("Barva označených bodů a čar:");

        javax.swing.GroupLayout mapSettingsPanelLayout = new javax.swing.GroupLayout(mapSettingsPanel);
        mapSettingsPanel.setLayout(mapSettingsPanelLayout);
        mapSettingsPanelLayout.setHorizontalGroup(
            mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pointColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lineThicknessSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fillColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectionColorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pointThicknessSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        mapSettingsPanelLayout.setVerticalGroup(
            mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapSettingsPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mapSettingsPanelLayout.createSequentialGroup()
                        .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(backColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mapSettingsPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pointColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mapSettingsPanelLayout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jLabel5)))
                        .addGap(7, 7, 7)
                        .addComponent(jLabel2))
                    .addComponent(lineColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fillColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selectionColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(pointThicknessSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mapSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(lineThicknessSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 188, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Nastavení mapy", mapSettingsPanel);

        mapPanel.setBackground(new java.awt.Color(255, 255, 255));
        mapPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mapPanel.setPreferredSize(new java.awt.Dimension(0, 0));
        mapPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mapPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mapPanelMouseMoved(evt);
            }
        });
        mapPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mapPanelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mapPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );

        mapScrollPanel.setViewportView(mapPanel);

        loadDataButton.setText("Načíst data z databáze");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        saveChangesButton.setText("Uložit změny do databáze");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesButtonActionPerformed(evt);
            }
        });

        positionLabel.setText("Pozice: [0, 0]");

        deleteButton.setText("Vymazat označený objekt");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        mainMenu.setLabel("Menu");

        loadDataMenuItem.setText("Načíst data z databáze");
        loadDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(loadDataMenuItem);

        deleteMenuItem.setText("Vymazat označený objekt");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(deleteMenuItem);

        saveChangesMenuItem.setText("Uložit změny do databáze");
        saveChangesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(saveChangesMenuItem);

        exitMenuItem.setText("Konec");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(exitMenuItem);

        jMenuBar1.add(mainMenu);

        helpMenu.setLabel("Nápověda");
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(mapScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(positionLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loadDataButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveChangesButton)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadDataButton)
                    .addComponent(saveChangesButton)
                    .addComponent(deleteButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mapScrollPanel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(positionLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData() {
        if (!ConnectDialog.connected)
        {
            new ConnectDialog(this, true).setVisible(true);
        }
        
        if (ConnectDialog.connected) 
        {
            selectRadioButton.setEnabled(true);
            addPointRadioButton.setEnabled(true);
            addPolylineRadioButton.setEnabled(true);
            addPolygonRadioButton.setEnabled(true);
            addRectangleRadioButton.setEnabled(true);
            addEllipseRadioButton.setEnabled(true);
            
            Data.loadData();
            
            ((DrawingPanel)mapPanel).createImageFromData();
            mapScrollPanel.revalidate();
            
            this.saveChangesButton.setEnabled(false);
            this.saveChangesMenuItem.setEnabled(false);
        }
    }
    
    private void saveChanges() {
        Data.saveData();
        saveChangesButton.setEnabled(false);
        saveChangesMenuItem.setEnabled(false);
    }
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
        
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void loadDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataMenuItemActionPerformed
        // TODO add your handling code here:
        loadData();
    }//GEN-LAST:event_loadDataMenuItemActionPerformed

    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed
        // TODO add your handling code here:
        loadData();
    }//GEN-LAST:event_loadDataButtonActionPerformed

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed
        // TODO add your handling code here:
        saveChanges();
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    private void saveChangesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesMenuItemActionPerformed
        // TODO add your handling code here:
        saveChanges();
    }//GEN-LAST:event_saveChangesMenuItemActionPerformed

    private void mapPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseMoved
        // TODO add your handling code here:
        
        int x = evt.getX();
        int y = evt.getY();
        
        lastX = x;
        lastY = y;
        
        positionLabel.setText("Pozice: [" + x + ", " + y + "]");
        
        if (selectRadioButton.isSelected()) {
            unhover();
            
            for (int i = 0; i < Data.points.size(); i++) {
                if (Point.distance(x, y, Data.points.get(i).x, Data.points.get(i).y) <= ((DrawingPanel) mapPanel).pointThickness / 2.0) {
                    Data.pointsInfo.get(i).hovered = true;
                    mapPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    ((DrawingPanel) mapPanel).createImageFromData();
                    return;
                }
            }

            BasicStroke bstr = new BasicStroke(1);
            for (int i = 0; i < Data.polylines.size(); i++) {
                for (int j = 1; j < Data.polylines.get(i).size(); j++) {
                    Line2D line = new Line2D.Double(
                            Data.polylines.get(i).get(j - 1).x,
                            Data.polylines.get(i).get(j - 1).y,
                            Data.polylines.get(i).get(j).x,
                            Data.polylines.get(i).get(j).y);

                    if (bstr.createStrokedShape(line).contains(x, y)) {
                        Data.polylinesInfo.get(i).hovered = true;
                        mapPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                        ((DrawingPanel) mapPanel).createImageFromData();
                        return;
                    }
                }
            }

            for (int i = 0; i < Data.rectangles.size(); i++) {
                if (Data.rectangles.get(i).contains(x, y)) {
                    Data.rectanglesInfo.get(i).hovered = true;
                    mapPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    ((DrawingPanel) mapPanel).createImageFromData();
                    return;
                }
            }

            for (int i = 0; i < Data.ellipses.size(); i++) {
                if (Data.ellipses.get(i).contains(x, y)) {
                    Data.ellipsesInfo.get(i).hovered = true;
                    mapPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    ((DrawingPanel) mapPanel).createImageFromData();
                    return;
                }
            }

            for (int i = 0; i < Data.polygons.size(); i++) {
                if (Data.polygons.get(i).contains(x, y)) {
                    Data.polygonsInfo.get(i).hovered = true;
                    mapPanel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    ((DrawingPanel) mapPanel).createImageFromData();
                    return;
                }
            }

            mapPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            ((DrawingPanel) mapPanel).createImageFromData();
        }
        else if (addPolylineRadioButton.isSelected())
        {
            if (newPolyline)
            {
                ArrayList<Point> polyline = Data.polylines.get(Data.polylines.size()-1);
                polyline.get(polyline.size()-1).x = x;
                polyline.get(polyline.size()-1).y = y;
                ((DrawingPanel) mapPanel).createImageFromData();
            }
        }
        else if (addPolygonRadioButton.isSelected())
        {
            if (newPolygon)
            {
                ArrayList<Point> polyline = Data.polylines.get(Data.polylines.size()-1);
                polyline.get(polyline.size()-1).x = x;
                polyline.get(polyline.size()-1).y = y;
                ((DrawingPanel) mapPanel).createImageFromData();
            }
        }
        else if (addRectangleRadioButton.isSelected())
        {
            if (newRectangle)
            {
                if (x < origin.x) 
                {
                    Data.rectangles.get(Data.rectangles.size()-1).x = x;
                    Data.rectangles.get(Data.rectangles.size()-1).width = origin.x - x;
                }
                else
                {
                    Data.rectangles.get(Data.rectangles.size()-1).x = origin.x;
                    Data.rectangles.get(Data.rectangles.size()-1).width = x - origin.x;
                }
                if (y < origin.y) 
                {
                    Data.rectangles.get(Data.rectangles.size()-1).y = y;
                    Data.rectangles.get(Data.rectangles.size()-1).height = origin.y - y;
                }
                else
                {
                    Data.rectangles.get(Data.rectangles.size()-1).y = origin.y;
                    Data.rectangles.get(Data.rectangles.size()-1).height = y - origin.y;
                }

                ((DrawingPanel) mapPanel).createImageFromData();
            }
        }
        else if (addEllipseRadioButton.isSelected())
        {
            if (newEllipse)
            {
                if (x < origin.x) 
                {
                    Data.ellipses.get(Data.ellipses.size()-1).setFrame(
                            x, 
                            Data.ellipses.get(Data.ellipses.size()-1).getY(), 
                            origin.x - x, 
                            Data.ellipses.get(Data.ellipses.size()-1).getHeight());
                }
                else
                {
                    Data.ellipses.get(Data.ellipses.size()-1).setFrame(
                            origin.x, 
                            Data.ellipses.get(Data.ellipses.size()-1).getY(), 
                            x - origin.x, 
                            Data.ellipses.get(Data.ellipses.size()-1).getHeight());
                }
                if (y < origin.y) 
                {
                    Data.ellipses.get(Data.ellipses.size()-1).setFrame(
                            Data.ellipses.get(Data.ellipses.size()-1).getX(), 
                            y, 
                            Data.ellipses.get(Data.ellipses.size()-1).getWidth(), 
                            origin.y - y);
                }
                else
                {
                    Data.ellipses.get(Data.ellipses.size()-1).setFrame(
                            Data.ellipses.get(Data.ellipses.size()-1).getX(), 
                            origin.y, 
                            Data.ellipses.get(Data.ellipses.size()-1).getWidth(), 
                            y - origin.y);
                }
                ((DrawingPanel) mapPanel).createImageFromData();
            }
        }
        
    }//GEN-LAST:event_mapPanelMouseMoved

    private void mapPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseDragged
        // TODO add your handling code here:
       
        if (!selectRadioButton.isSelected())
        {
            mapPanelMouseMoved(evt);
            return;
        }
        
        int x = evt.getX();
        int y = evt.getY();
        
        int xDiff = x - lastX;
        int yDiff = y - lastY;
        
        lastX = x;
        lastY = y;
        
        positionLabel.setText("Pozice: [" + x + ", " + y + "]");
        
        for (int i = 0; i < Data.points.size(); i++)
        {
            if (Data.pointsInfo.get(i).selected)
                setInfo(Data.pointsInfo.get(i));
            if (Data.pointsInfo.get(i).selected && Data.pointsInfo.get(i).editable)
            {
                Data.points.get(i).translate(xDiff, yDiff);
                saveChangesButton.setEnabled(true);
                saveChangesMenuItem.setEnabled(true);
            }
        }
        
        for (int i = 0; i < Data.polylines.size(); i++)
        {
            if (Data.polylinesInfo.get(i).selected)
                setInfo(Data.polylinesInfo.get(i));
            if (Data.polylinesInfo.get(i).selected && Data.polylinesInfo.get(i).editable)
            {
                for (int j = 0; j < Data.polylines.get(i).size(); j++)
                {
                    Data.polylines.get(i).get(j).translate(xDiff, yDiff);
                }

                saveChangesButton.setEnabled(true);
                saveChangesMenuItem.setEnabled(true);
            }
        }
        
        for (int i = 0; i < Data.rectangles.size(); i++)
        {
            if (Data.rectanglesInfo.get(i).selected)
                setInfo(Data.rectanglesInfo.get(i));
            if (Data.rectanglesInfo.get(i).selected && Data.rectanglesInfo.get(i).editable)
            {
                Data.rectangles.get(i).translate(xDiff, yDiff);
                saveChangesButton.setEnabled(true);
                saveChangesMenuItem.setEnabled(true);
            }
        }
        
        for (int i = 0; i < Data.ellipses.size(); i++)
        {
            if (Data.ellipsesInfo.get(i).selected)
                setInfo(Data.ellipsesInfo.get(i));
            if (Data.ellipsesInfo.get(i).selected && Data.ellipsesInfo.get(i).editable)
            {
                Data.ellipses.get(i).setFrame(Data.ellipses.get(i).getX() + xDiff, 
                        Data.ellipses.get(i).getY() + yDiff,
                        Data.ellipses.get(i).getWidth(),
                        Data.ellipses.get(i).getHeight());
                saveChangesButton.setEnabled(true);
                saveChangesMenuItem.setEnabled(true);
            }
        }
        
        for (int i = 0; i < Data.polygons.size(); i++)
        {
            if (Data.polygonsInfo.get(i).selected)
                setInfo(Data.polygonsInfo.get(i));
            if (Data.polygonsInfo.get(i).selected && Data.polygonsInfo.get(i).editable)
            {
                Data.polygons.get(i).translate(xDiff, yDiff);
                saveChangesButton.setEnabled(true);
                saveChangesMenuItem.setEnabled(true);
            }
        }
        
        ((DrawingPanel)mapPanel).createImageFromData();
         
    }//GEN-LAST:event_mapPanelMouseDragged

    private void mapPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMouseExited
        // TODO add your handling code here:
        positionLabel.setText("Pozice: [0, 0]");
        unhover();
    }//GEN-LAST:event_mapPanelMouseExited

    private void pointThicknessSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pointThicknessSpinnerStateChanged
        // TODO add your handling code here:
        ((DrawingPanel)mapPanel).pointThickness = (int)pointThicknessSpinner.getValue();
        ((DrawingPanel)mapPanel).createImageFromData();
    }//GEN-LAST:event_pointThicknessSpinnerStateChanged

    private void pointColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pointColorPanelMouseClicked
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Barva bodů", ((DrawingPanel)mapPanel).pointColor);
        if (color != null) {
            pointColorPanel.setBackground(color);
            ((DrawingPanel)mapPanel).pointColor = color;
            ((DrawingPanel)mapPanel).createImageFromData();
        }
    }//GEN-LAST:event_pointColorPanelMouseClicked

    private void lineThicknessSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_lineThicknessSpinnerStateChanged
        // TODO add your handling code here:
        ((DrawingPanel)mapPanel).lineThickness = (int)lineThicknessSpinner.getValue();
        ((DrawingPanel)mapPanel).createImageFromData();
    }//GEN-LAST:event_lineThicknessSpinnerStateChanged

    private void fillColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fillColorPanelMouseClicked
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Barva vyplněných oblastí", ((DrawingPanel)mapPanel).fillColor);
        if (color != null) {
            fillColorPanel.setBackground(color);
            ((DrawingPanel)mapPanel).fillColor = color;
            ((DrawingPanel)mapPanel).createImageFromData();
        }
    }//GEN-LAST:event_fillColorPanelMouseClicked

    private void lineColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lineColorPanelMouseClicked
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Barva čar", ((DrawingPanel)mapPanel).lineColor);
        if (color != null) {
            lineColorPanel.setBackground(color);
            ((DrawingPanel)mapPanel).lineColor = color;
            ((DrawingPanel)mapPanel).createImageFromData();
        }
    }//GEN-LAST:event_lineColorPanelMouseClicked

    private void backColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backColorPanelMouseClicked
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Barva pozadí", Color.WHITE);
        if (color != null) {
            backColorPanel.setBackground(color);
            ((DrawingPanel)mapPanel).backColor = color;
            ((DrawingPanel)mapPanel).createImageFromData();
        }
    }//GEN-LAST:event_backColorPanelMouseClicked

    private void selectionColorPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectionColorPanelMouseClicked
        // TODO add your handling code here:
        Color color = JColorChooser.showDialog(this, "Barva označných bodů a čar", Color.WHITE);
        if (color != null) {
            selectionColorPanel.setBackground(color);
            ((DrawingPanel)mapPanel).selectionLineColor = color;
            ((DrawingPanel)mapPanel).selectionFillColor = new Color(color.getRed(), color.getGreen(), color.getBlue(), DEFAULT_SELECTION_FILL_COLOR.getAlpha());
            ((DrawingPanel)mapPanel).createImageFromData();
        }
    }//GEN-LAST:event_selectionColorPanelMouseClicked

    private void mapPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanelMousePressed
        // TODO add your handling code here:
        
        if (selectRadioButton.isSelected()) {
            
            deleteButton.setEnabled(false);
            deleteMenuItem.setEnabled(false);

            for (int i = 0; i < Data.points.size(); i++) {
                if (Data.pointsInfo.get(i).hovered) {
                    Data.pointsInfo.get(i).selected = true;
                    deleteButton.setEnabled(true);
                    deleteMenuItem.setEnabled(true);
                } else {
                    Data.pointsInfo.get(i).selected = false;
                }
            }

            for (int i = 0; i < Data.polylines.size(); i++) {
                if (Data.polylinesInfo.get(i).hovered) {
                    Data.polylinesInfo.get(i).selected = true;
                    deleteButton.setEnabled(true);
                    deleteMenuItem.setEnabled(true);
                } else {
                    Data.polylinesInfo.get(i).selected = false;
                }
            }

            for (int i = 0; i < Data.rectangles.size(); i++) {
                if (Data.rectanglesInfo.get(i).hovered) {
                    Data.rectanglesInfo.get(i).selected = true;
                    deleteButton.setEnabled(true);
                    deleteMenuItem.setEnabled(true);
                } else {
                    Data.rectanglesInfo.get(i).selected = false;
                }
            }

            for (int i = 0; i < Data.ellipses.size(); i++) {
                if (Data.ellipsesInfo.get(i).hovered) {
                    Data.ellipsesInfo.get(i).selected = true;
                    deleteButton.setEnabled(true);
                    deleteMenuItem.setEnabled(true);
                } else {
                    Data.ellipsesInfo.get(i).selected = false;
                }
            }

            for (int i = 0; i < Data.polygons.size(); i++) {
                if (Data.polygonsInfo.get(i).hovered) {
                    Data.polygonsInfo.get(i).selected = true;
                    deleteButton.setEnabled(true);
                    deleteMenuItem.setEnabled(true);
                } else {
                    Data.polygonsInfo.get(i).selected = false;
                }
            }
        }
        else if (addPointRadioButton.isSelected())
        {
            Data.points.add(new Point(evt.getX(), evt.getY()));
            ObjectInfo info = new ObjectInfo();
            Data.pointsInfo.add(info);
            
            saveChangesButton.setEnabled(true);
            saveChangesMenuItem.setEnabled(true);
        }
        else if (addPolylineRadioButton.isSelected())
        {
            if (evt.getButton() == MouseEvent.BUTTON1)
            {
                if (newPolyline == false)
                {
                    unselect();
                    Data.polylines.add(new ArrayList<Point>());
                    Data.polylines.get(Data.polylines.size()-1).add(new Point(evt.getX(), evt.getY()));
                    Data.polylines.get(Data.polylines.size()-1).add(new Point(evt.getX(), evt.getY()));
                    ObjectInfo info = new ObjectInfo();
                    info.selected = true;
                    Data.polylinesInfo.add(info);
                    newPolyline = true;
                    saveChangesButton.setEnabled(false);
                }
                else
                {
                    Data.polylines.get(Data.polylines.size()-1).add(new Point(evt.getX(), evt.getY()));
                }
            }
            else if (evt.getButton() == MouseEvent.BUTTON3)
            {
                if (newPolyline == true)
                {
                    unselect();
                    newPolyline = false;
            
                    saveChangesButton.setEnabled(true);
                    saveChangesMenuItem.setEnabled(true);
                    
                }
            }
        }
        else if (addPolygonRadioButton.isSelected())
        {
            if (evt.getButton() == MouseEvent.BUTTON1)
            {
                if (newPolygon == false)
                {
                    unselect();
                    Data.polylines.add(new ArrayList<Point>());
                    Data.polylines.get(Data.polylines.size()-1).add(new Point(evt.getX(), evt.getY()));
                    Data.polylines.get(Data.polylines.size()-1).add(new Point(evt.getX(), evt.getY()));
                    ObjectInfo info = new ObjectInfo();
                    info.selected = true;
                    Data.polylinesInfo.add(info);
                    newPolygon = true;
                    saveChangesButton.setEnabled(false);
                }
                else
                {
                    Data.polylines.get(Data.polylines.size()-1).add(new Point(evt.getX(), evt.getY()));
                }
            }
            else if (evt.getButton() == MouseEvent.BUTTON3)
            {
                if (newPolygon == true)
                {
                    unselect();
                    newPolygon = false;
                    
                    Polygon polygon = new Polygon();
                    for (int i = 0; i < Data.polylines.get(Data.polylines.size()-1).size(); i++)
                    {
                        polygon.addPoint(Data.polylines.get(Data.polylines.size()-1).get(i).x, 
                                Data.polylines.get(Data.polylines.size()-1).get(i).y);
                    }
                    Data.polygons.add(polygon);
                    Data.polylines.remove(Data.polylines.size()-1);
                    Data.polygonsInfo.add(Data.polylinesInfo.get(Data.polylinesInfo.size()-1));
                    Data.polylinesInfo.remove(Data.polylinesInfo.size()-1);
            
                    saveChangesButton.setEnabled(true);
                    saveChangesMenuItem.setEnabled(true);
                    
                }
            }
        }
        else if (addRectangleRadioButton.isSelected())
        {
            if (evt.getButton() == MouseEvent.BUTTON1 && !newRectangle) {

                origin.x = evt.getX();
                origin.y = evt.getY();
                Data.rectangles.add(new Rectangle());
                Data.rectangles.get(Data.rectangles.size() - 1).setRect(origin.x, origin.y, 0, 0);
                ObjectInfo info = new ObjectInfo();
                info.selected = true;
                Data.rectanglesInfo.add(info);
                newRectangle = true;
                saveChangesButton.setEnabled(false);

            }
            else if (evt.getButton() == MouseEvent.BUTTON3 ||(evt.getButton() == MouseEvent.BUTTON1 && newRectangle))
            {
                if (newRectangle == true)
                {
                    unselect();
                    newRectangle = false;
            
                    saveChangesButton.setEnabled(true);
                    saveChangesMenuItem.setEnabled(true);
                    
                }
            }
        }
        else if (addEllipseRadioButton.isSelected())
        {
            if (evt.getButton() == MouseEvent.BUTTON1 && !newEllipse) {
                origin.x = evt.getX();
                origin.y = evt.getY();
                Data.ellipses.add(new Ellipse2D.Double());
                Data.ellipses.get(Data.ellipses.size() - 1).setFrame(origin.x, origin.y, 0, 0);
                ObjectInfo info = new ObjectInfo();
                info.selected = true;
                Data.ellipsesInfo.add(info);
                newEllipse = true;
                saveChangesButton.setEnabled(false);

            }
            else if (evt.getButton() == MouseEvent.BUTTON3 ||(evt.getButton() == MouseEvent.BUTTON1 && newEllipse))
            {
                if (newEllipse == true)
                {
                    unselect();
                    newEllipse = false;
            
                    saveChangesButton.setEnabled(true);
                    saveChangesMenuItem.setEnabled(true);
                    
                }
            }
        }
        
        ((DrawingPanel)mapPanel).createImageFromData();
    }//GEN-LAST:event_mapPanelMousePressed

    private void deleteSelectedObject()
    {
        int option = JOptionPane.showConfirmDialog(null, "Opravdu vymazat označený objekt?", "Vymazat objekt?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.YES_OPTION)
        {
            deleteButton.setEnabled(false);
            deleteMenuItem.setEnabled(false);
        
            for (int i = 0; i < Data.points.size(); i++)
            {
                if (Data.pointsInfo.get(i).selected)
                {
                    Data.points.remove(i);
                    Data.pointsInfo.remove(i);
                    i--;
                }
            }
        
            for (int i = 0; i < Data.polylines.size(); i++)
            {
                if (Data.polylinesInfo.get(i).selected)
                {
                    Data.polylines.remove(i);
                    Data.polylinesInfo.remove(i);
                    i--;
                }
            }
        
            for (int i = 0; i < Data.rectangles.size(); i++)
            {
                if (Data.rectanglesInfo.get(i).selected)
                {
                    Data.rectangles.remove(i);
                    Data.rectanglesInfo.remove(i);
                    i--;
                }
            }
        
            for (int i = 0; i < Data.ellipses.size(); i++)
            {
                if (Data.ellipsesInfo.get(i).selected)
                {
                    Data.ellipses.remove(i);
                    Data.ellipsesInfo.remove(i);
                    i--;
                }
            }
        
            for (int i = 0; i < Data.polygons.size(); i++)
            {
                if (Data.polygonsInfo.get(i).selected)
                {
                    Data.polygons.remove(i);
                    Data.polygonsInfo.remove(i);
                    i--;
                }
            }
            
            saveChangesButton.setEnabled(true);
            saveChangesMenuItem.setEnabled(true);
        
            ((DrawingPanel)mapPanel).createImageFromData();
        }
    }
    
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        deleteSelectedObject();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        // TODO add your handling code here:
        deleteSelectedObject();
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void addPolylineRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addPolylineRadioButtonItemStateChanged
        // TODO add your handling code here:
        if (newPolyline == true) {
            unselect();
            newPolyline = false;

            saveChangesButton.setEnabled(true);
            saveChangesMenuItem.setEnabled(true); 
        }
        
        ((DrawingPanel)mapPanel).createImageFromData();
    }//GEN-LAST:event_addPolylineRadioButtonItemStateChanged

    private void addPolygonRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addPolygonRadioButtonItemStateChanged
        // TODO add your handling code here:
        if (newPolygon == true) {
            unselect();
            newPolygon = false;

            Polygon polygon = new Polygon();
            for (int i = 0; i < Data.polylines.get(Data.polylines.size() - 1).size(); i++) {
                polygon.addPoint(Data.polylines.get(Data.polylines.size() - 1).get(i).x,
                        Data.polylines.get(Data.polylines.size() - 1).get(i).y);
            }
            Data.polygons.add(polygon);
            Data.polylines.remove(Data.polylines.size() - 1);
            Data.polygonsInfo.add(Data.polylinesInfo.get(Data.polylinesInfo.size() - 1));
            Data.polylinesInfo.remove(Data.polylinesInfo.size() - 1);

            saveChangesButton.setEnabled(true);
            saveChangesMenuItem.setEnabled(true);

        }
    }//GEN-LAST:event_addPolygonRadioButtonItemStateChanged

    private void addRectangleRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addRectangleRadioButtonItemStateChanged
        // TODO add your handling code here:
        if (newRectangle == true)
        {
            unselect();
            newRectangle = false;
            
            saveChangesButton.setEnabled(true);
            saveChangesMenuItem.setEnabled(true);
                    
        }
    }//GEN-LAST:event_addRectangleRadioButtonItemStateChanged

    private void addEllipseRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addEllipseRadioButtonItemStateChanged
        // TODO add your handling code here:
        if (newEllipse == true)
        {
            unselect();
            newEllipse = false;
            
            saveChangesButton.setEnabled(true);
            saveChangesMenuItem.setEnabled(true);
                    
        }
    }//GEN-LAST:event_addEllipseRadioButtonItemStateChanged

    private void unselect()
    {
        deleteButton.setEnabled(false);
        deleteMenuItem.setEnabled(false);
        
        for (int i = 0; i < Data.points.size(); i++)
        {
            
            Data.pointsInfo.get(i).selected = false;
        }
        
        for (int i = 0; i < Data.polylines.size(); i++)
        {
            Data.polylinesInfo.get(i).selected = false;
        }
        
        for (int i = 0; i < Data.rectangles.size(); i++)
        {
            
            Data.rectanglesInfo.get(i).selected = false;
        }
        
        for (int i = 0; i < Data.ellipses.size(); i++)
        {
            Data.ellipsesInfo.get(i).selected = false;
        }
        
        for (int i = 0; i < Data.polygons.size(); i++)
        {
            Data.polygonsInfo.get(i).selected = false;
        }
        
        ((DrawingPanel)mapPanel).createImageFromData();
    }
    
    private void unhover()
    {
        for (int i = 0; i < Data.points.size(); i++)
        {
            Data.pointsInfo.get(i).hovered = false;
        }
        
        for (int i = 0; i < Data.polylines.size(); i++)
        {
            Data.polylinesInfo.get(i).hovered = false;
        }
        
        for (int i = 0; i < Data.rectangles.size(); i++)
        {
            
            Data.rectanglesInfo.get(i).hovered = false;
        }
        
        for (int i = 0; i < Data.ellipses.size(); i++)
        {
            Data.ellipsesInfo.get(i).hovered = false;
        }
        
        for (int i = 0; i < Data.polygons.size(); i++)
        {
            Data.polygonsInfo.get(i).hovered = false;
        }
        
        ((DrawingPanel)mapPanel).createImageFromData();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton addEllipseRadioButton;
    private javax.swing.JRadioButton addPointRadioButton;
    private javax.swing.JRadioButton addPolygonRadioButton;
    private javax.swing.JRadioButton addPolylineRadioButton;
    private javax.swing.JRadioButton addRectangleRadioButton;
    private javax.swing.JPanel backColorPanel;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JPanel editPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JPanel fillColorPanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel infoMajitelLabel;
    private javax.swing.JLabel infoNazevLabel;
    private javax.swing.JLabel infoNazevLabel1;
    private javax.swing.JLabel infoNazevLabel2;
    private javax.swing.JLabel infoNazevLabel3;
    private javax.swing.JLabel infoNazevLabel4;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel infoPopisLabel;
    private javax.swing.JLabel infoTypLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel lineColorPanel;
    private javax.swing.JSpinner lineThicknessSpinner;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JMenuItem loadDataMenuItem;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JScrollPane mapScrollPanel;
    private javax.swing.JPanel mapSettingsPanel;
    private javax.swing.JPanel pointColorPanel;
    private javax.swing.JSpinner pointThicknessSpinner;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JButton saveChangesButton;
    private javax.swing.JMenuItem saveChangesMenuItem;
    private javax.swing.JRadioButton selectRadioButton;
    private javax.swing.JPanel selectionColorPanel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    private void setInfo(ObjectInfo info) {
        infoNazevLabel1.setText(info.nazev);
        infoNazevLabel2.setText(info.typ);
        infoNazevLabel3.setText(info.majitel);
        infoNazevLabel4.setText(info.popis);
    }
}
